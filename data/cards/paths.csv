front, back
import the Path class, from pathlib import Path
check if `Path` object `path` exists, path.exists()
check if `Path` object `path` is a file, path.is_file()
check if `Path` object `path` is a directory, path.is_dir()
a path that starts at the root directory is called, absolute
a path that starts at the working directory is called, relative
get the filename from `Path` object `path`, path.name
get an absolute version of `Path` object `path`, path.absolute()
get an absolute and normalized version of `Path` object `path`, path.resolve()
get the filename without extension from `Path` object `path`, path.stem
get the extension from `Path` object `path`, path.suffix
get the parent directory of `Path` object `path`, path.parent
list directory contents of` Path` object `path`, path.iterdir()
remove directory at `Path` object `path`, path.rmdir()
create directory at `Path` object `path`, path.mkdir()
create directory at `Path` object `path` without error if it already exists, path.mkdir(exist_ok=True)
create empty file or update timestamp of file at `Path` object `path`, path.touch()
delete file at `Path` object `path`, path.unlink()
rename `Path` object `path` to "file.txt" in your working directory, path.replace("file.txt")
rename `Path` object `path` to "file.txt" in the "data/" directory, path.replace("data/file.txt")
move `Path` object `path` to "data/cards/questions.csv", path.replace("data/cards/questions.csv")
delete file at `Path` object `path` without error if file does not exist, path.unlink(missing_ok=True)
`Path` object to home directory, Path.home()
`Path` object to working directory, Path.cwd()
method to create `Path` object to "file.txt" inside directory `rootdir` (a `Path` object), path.joinpath("file.txt")
operator to create `Path` object to "file.txt" inside directory `rootdir` (a `Path` object), path / "file.txt"
special variable that stores the full path to the current file (a string), __file__
the top-most directory in the file system is called, root

